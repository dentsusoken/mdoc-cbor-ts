import { decode } from 'cbor';
import { Sign1 } from 'cose-kit';
import { bytes2CoseSign1, cborlist2CoseSign1, shuffleDict } from './tools';

function hexToUint8Array(hex: string): Uint8Array {
  let arr = new Uint8Array(hex.length / 2);
  for (let i = 0; i < hex.length; i += 2) {
    arr[i / 2] = Number.parseInt(hex.substr(i, 2), 16);
  }
  return arr;
}

const cbor =
  'd284590220a30126044864656d6f2d6b6964182159020e3082020a308201afa00302010202146cebb62fee890598d65db670f4a2e8e50b69951d300a06082a8648ce3d0403023064310b30090603550406130255533113301106035504080c0a43616c69666f726e69613116301406035504070c0d53616e204672616e636973636f31133011060355040a0c0a4d7920436f6d70616e793113301106035504030c0a6d79736974652e636f6d301e170d3234303931393032353334315a170d3234303932393032353334315a3064310b30090603550406130255533113301106035504080c0a43616c69666f726e69613116301406035504070c0d53616e204672616e636973636f31133011060355040a0c0a4d7920436f6d70616e793113301106035504030c0a6d79736974652e636f6d3059301306072a8648ce3d020106082a8648ce3d03010703420004c3d96e87171ddda788c97746d10b7b635c50ba05ee54d63a6938c925dbfdd37cf5c7b03cfa2f699242c0aff9bb464359c475c627a44b27b574cd93afc68d581ca33f303d303b0603551d1104343032863068747470733a2f2f63726564656e7469616c2d6973737565722e6f6964632d66656465726174696f6e2e6f6e6c696e65300a06082a8648ce3d0403020349003046022100d87f73ea08deaaf652c1f63813bbc634210e7ab324a145658d1f8285995a5802022100e0b0971bfd7126b12645adbf9abe002580a94303c9774d9f42dfbd358d87fb45a1182159020e3082020a308201afa00302010202143a1db367d39a6f6c6f8998cdfb0b63c175943eb1300a06082a8648ce3d0403023064310b30090603550406130255533113301106035504080c0a43616c69666f726e69613116301406035504070c0d53616e204672616e636973636f31133011060355040a0c0a4d7920436f6d70616e793113301106035504030c0a6d79736974652e636f6d301e170d3234303931393032353334315a170d3234303932393032353334315a3064310b30090603550406130255533113301106035504080c0a43616c69666f726e69613116301406035504070c0d53616e204672616e636973636f31133011060355040a0c0a4d7920436f6d70616e793113301106035504030c0a6d79736974652e636f6d3059301306072a8648ce3d020106082a8648ce3d03010703420004c3d96e87171ddda788c97746d10b7b635c50ba05ee54d63a6938c925dbfdd37cf5c7b03cfa2f699242c0aff9bb464359c475c627a44b27b574cd93afc68d581ca33f303d303b0603551d1104343032863068747470733a2f2f63726564656e7469616c2d6973737565722e6f6964632d66656465726174696f6e2e6f6e6c696e65300a06082a8648ce3d0403020349003046022100cc16e99135d4eb85794b0f866434f60088b80161c168c933cf475de982ccac2d022100bd2a722b2be5b8a057e4a6a5337811d38a2fdc59d76cf22ab42c345bf4f646cf5901e8a66776657273696f6e63312e306f646967657374416c676f726974686d667368613235366c76616c756544696765737473a2781865752e6575726f70612e65632e65756469772e7069642e31a5005820626bb3f7530a651befaee4ffc093ee8693551391314e6e21ae41b35ffdcf63c1015820fe346c4d7f26c89f0a86e26b56fc8b4dc52092dcd25a343d7a517a79921767d1025820e94ddcd9dd0fa0069b682defba48e9f26b216ca5a65726dbe3352d4638180b5f035820d0ab588b899a10140de7bc58fa38ecf4aade7fc4e57fa9fb637a4351cf729aba045820559dacc1c7acc94838739d6479988faa2a797c865fa8f0b0341f0d529cbdec44781b65752e6575726f70612e65632e65756469772e7069642e69742e31a1055820270637a835e82ac51d5529f40794eba93cc380658e94cb5dcfc4b06f70edc55e6d6465766963654b6579496e666fa1696465766963654b6579f667646f6354797065781865752e6575726f70612e65632e65756469772e7069642e316c76616c6964697479496e666fa3667369676e656456c074323032342d30392d31395430323a35333a34315a6976616c696446726f6d56c074323032342d30392d31395430323a35333a34315a6a76616c6964556e74696c56c074323032392d30392d31385430323a35333a34315a5840554f621c01e597fc61ec782f922d68ef7339bf3bd736b4ce5a2a134ac36a6dc333adcc8706cc7dbd510257b690fbb38733c3d5d37326d943132b53e7cc87cb3a';
const data = hexToUint8Array(cbor);

describe('tools', () => {
  describe('bytes2CoseSign1', () => {
    it('should return a Sign1Message', async () => {
      const ret = bytes2CoseSign1(data);
      expect(ret).toBeDefined();
      expect(ret).toBeInstanceOf(Sign1);
    });
  });
  describe('cborlist2CoseSign1', () => {
    it('should return a Sign1Message', async () => {
      const list = decode(data).value;
      const ret = cborlist2CoseSign1(list);
      expect(ret).toBeDefined();
      expect(ret).toBeInstanceOf(Sign1);
    });
  });
  describe('shuffleDict', () => {
    it('should return a shuffled dictionary', async () => {
      const dict = { a: 1, b: 2, c: 3, d: 4, e: 5 };
      const ret = shuffleDict(dict);
      expect(ret).toBeDefined();
      expect(Object.keys(ret)).not.toEqual(Object.keys(dict));
    });
  });
});
